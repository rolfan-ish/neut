data item1 {
| Item1(list(int))
}

data item2(a) {
| Item2(a)
}

data item3(a, b) {
| Item3((a) -> b)
}

data item4(a, b) {
| Item4(pair(a, b))
}

define trace-list<a>(xs: list(a)): list(a) {
  match xs {
  | Nil =>
    Nil
  | Cons(y, ys) =>
    Cons(y, trace-list(ys))
  }
}

define use-item1(x: item1): list(int) {
  match x {
  | Item1(value) =>
    trace-list(value)
  }
}

define use-item1-noetic(x: &item1): list(int) {
  case x {
  | Item1(value) =>
    trace-list(*value)
  }
}

define test-item1(): unit {
  let !value = Item1(List[1, 2, 3]);
  let _ = !value;
  let _ = !value;
  let _ = !value;
  let _ = use-item1(!value);
  let _ on !value = {
    let _ = use-item1-noetic(!value);
    Unit
  };
  let _ = !value;
  Unit
}

define use-item2(a: type, x: item2(a)): a {
  match x {
  | Item2(value) =>
    value
  }
}

define use-item2-noetic(a: type, x: &item2(a)): &a {
  case x {
  | Item2(value) =>
    value
  }
}

define test-item2(): unit {
  let !value: item2(list(int)) = Item2(List[1, 2, 3]);
  let _ = !value;
  let _ = !value;
  let _ = !value;
  let _ = use-item2(list(int), !value);
  let _ on !value = {
    let _ = use-item2-noetic(list(int), !value);
    Unit
  };
  let _ = !value;
  Unit
}

define use-item3(a: type, b: type, f: item3(a, b), x: a): b {
  match f {
  | Item3(func) =>
    func(x)
  }
}

define use-item3-noetic(a: type, b: type, f: &item3(a, b), x: a): b {
  case f {
  | Item3(func-n) =>
    let func = *func-n;
    func(x)
  }
}

define test-item3(): unit {
  let !value: item3(int, list(int)) =
    Item3(function (x) {
      List[x, 2, 3]
    });
  let _ = !value;
  let _ = !value;
  let _ = !value;
  let _ = use-item3(int, list(int), !value, 1);
  let _ on !value = {
    let _ = use-item3-noetic(int, list(int), !value, 1);
    Unit
  };
  let _ = !value;
  Unit
}

define use-item4(x: item4(int, list(int))): list(int) {
  match x {
  | Item4(Pair(v, xs)) =>
    trace-list(Cons(v, xs))
  }
}

define use-item4-noetic(x: &item4(int, list(int))): list(int) {
  case x {
  | Item4(Pair(v, xs)) =>
    trace-list(Cons(*v, *xs))
  }
}

define test-item4(): unit {
  let !value: item4(int, list(int)) = Item4(Pair(3, List[1, 2, 3]));
  let _ = !value;
  let _ = !value;
  let _ = !value;
  let _ = use-item4(!value);
  let _ on !value = {
    let _ = use-item4-noetic(!value);
    Unit
  };
  let _ = !value;
  Unit
}

define main(): unit {
  test-item1();
  test-item2();
  test-item3();
  test-item4()
}
