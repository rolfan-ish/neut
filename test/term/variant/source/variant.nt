data nat {
| Zero
| Succ(nat)
}

data empty {}

define affine-nat(): unit {
  let _ = Zero;
  let _ = Succ(Zero);
  let _ = Succ(Succ(Zero));
  Unit
}

define relevant-nat(): unit {
  let !zero = Zero;
  let !one = Succ(Zero);
  let !two = Succ(Succ(Zero));
  let _ = !zero;
  let _ = !zero;
  let _ = !one;
  let _ = !one;
  let _ = !two;
  let _ = !two;
  Unit
}

define affine-list(): unit {
  let _: list(nat) = List[];
  let _ = List[Zero];
  let _ = List[Succ(Zero), Zero];
  Unit
}

define relevant-list(): unit {
  let !zero: list(nat) = List[];
  let !one = List[Zero];
  let !two = List[Succ(Zero), Zero];
  let _ = !zero;
  let _ = !zero;
  let _ = !one;
  let _ = !one;
  let _ = !two;
  let _ = !two;
  Unit
}

define affine-either(): unit {
  let _: either(bool, list(nat)) = Left(True);
  let _: either(bool, list(nat)) = Right(List[Zero]);
  let _: either(bool, list(nat)) = Right(List[Succ(Zero), Zero]);
  Unit
}

define relevant-either(): unit {
  let !foo: either(bool, list(nat)) = Left(True);
  let !bar: either(bool, list(nat)) = Right(List[Zero]);
  let !buz: either(bool, list(nat)) = Right(List[Succ(Zero), Zero]);
  let _ = !foo;
  let _ = !foo;
  let _ = !bar;
  let _ = !bar;
  let _ = !buz;
  let _ = !buz;
  Unit
}

data term(a) {
| Var(a)
| Abs(a, term(a))
| App(term(a), term(a))
}

define local-completeness(a: type, t: term(a)): term(a) {
  match t {
  | Var(v) =>
    Var(v)
  | Abs(x, t1) =>
    Abs(x, t1)
  | App(t1, t2) =>
    App(t1, t2)
  }
}

define nested-match(a: type, t: term(a)): term(a) {
  match t {
  | App(Abs(_, t'), _) =>
    t'
  | t =>
    t
  }
}

data my-enum {
| Foo
| Bar
}

define using-if(): int {
  let _ =
    if True {
      if False {
        Unit
      } else {
        Unit
      }
    } else {
      Unit
    };
  let some-cond = True;
  when some-cond {
    print("hey")
  };
  if False {
    1
  } else-if lt-int(0, 10) {
    2
  } else {
    3
  }
}

define nested-enum-match(t: term(my-enum)): my-enum {
  let val =
    match t {
    | App(Abs(x, !t'), Var(e)) =>
      let _ = Var(e);
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = !t';
      let _ = x;
      let _ = Var(e);
      let _ = x;
      let _ = Var(e);
      let _ = x;
      x
    | App(Abs(x, _), App(Var(_), App(_, App(_, _)))) =>
      let _ = x;
      x
    | App(Abs(x, _), App(App(_, App(_, _)), Var(_))) =>
      x
    | App(App(Abs(_, _), Var(_)), App(App(Abs(y, _), App(_, _)), Var(_))) =>
      y
    | App(App(Abs(x, _), Var(_)), App(App(_, App(_, _)), Var(_))) =>
      x
    | !t =>
      let _ = !t;
      let _ = !t;
      let _ = !t;
      Foo
    };
  match val {
  | Foo =>
    let _ = val;
    Bar
  | Bar =>
    Foo
  }
}

define unbalanced-freevars-in-branches(a: type, !t: term(a)): term(a) {
  let !foo = Var("test");
  let f =
    function () {
      !foo
    };
  let g =
    function () {
      !foo
    };
  let h =
    function () {
      !foo
    };
  match !t {
  | Var(x) =>
    let _ = f;
    match !t {
    | Var(y) =>
      let _ = g;
      let _ = x;
      Var(y)
    | Abs(_, t) =>
      t
    | _ =>
      !t
    }
  | Abs(_, !t) =>
    match !t {
    | App(_, e2) =>
      e2
    | _ =>
      let _ = !t;
      let _ = !t;
      !t
    }
  | App(t1, _) =>
    let _ = g;
    let !k =
      if False {
        h
      } else {
        function () {
          Var("pohe")
        }
      };
    let _ = !k;
    let _ = !k;
    let _ = !k;
    t1
  }
}

define literal-match(x: int): int {
  match x {
  | 1 =>
    10
  | 2 =>
    20
  | 3 =>
    30
  | n =>
    add-int(n, 1)
  }
}

define literal-match-in-cons(xs: list(int)): int {
  match xs {
  | Nil =>
    0
  | Cons(1, _) =>
    10
  | Cons(2, _) =>
    20
  | Cons(_, _) =>
    333
  | Cons(4, _) =>
    40
  }
}

define literal-match-N(x: &int): int {
  case x {
  | 1 =>
    10
  | 2 =>
    20
  | 3 =>
    30
  | n =>
    add-int(*n, 1)
  }
}

define literal-match-in-cons-N(xs: &list(int)): int {
  case xs {
  | Nil =>
    0
  | Cons(1, _) =>
    10
  | Cons(2, _) =>
    20
  | Cons(k, _) =>
    *k
  | Cons(4, _) =>
    40
  }
}

data monoid(a) {
| Monoid(
    m-empty: a,
    m-op: (a, a) -> a,
  )
}

define list-monoid(a: type): monoid(list(a)) {
  Monoid of {
    m-op := {
      function (xs, ys) {
        core.list.append(xs, ys)
      }
    },
    m-empty := Nil,
  }
}

define use-struct<a>(m: monoid(a)): a {
  let Monoid of {m-empty := !empty, m-op} = m;
  m-op(!empty, !empty)
}

define use-struct-2<a>(m: monoid(a)): a {
  let Monoid of {m-empty, m-op} = m;
  let !empty = m-empty;
  m-op(!empty, !empty)
}

define test-resource(): unit {
  affine-nat();
  relevant-nat();
  affine-list();
  relevant-list();
  affine-either();
  relevant-either()
}

define test-match(): unit {
  let !t1 = Var("text");
  let !t2 = Abs("foo", Var("foo"));
  let !t3 = App(Abs("foo", Var("foo")), Var("buz"));
  let _ = local-completeness(_, !t1);
  let _ = local-completeness(_, !t2);
  let _ = local-completeness(_, !t3);
  let _ = nested-match(_, !t1);
  let _ = nested-match(_, !t2);
  let _ = nested-match(_, !t3);
  let !t1 = Var(Foo);
  let !t2 = Abs(Bar, Var(Bar));
  let !t3 = App(Abs(Bar, Var(Bar)), Var(Foo));
  let !t4 = Abs(Bar, App(Var(Bar), Var(Bar)));
  let _ = nested-enum-match(!t1);
  let _ = nested-enum-match(!t2);
  let _ = nested-enum-match(!t3);
  let _ = nested-enum-match(!t4);
  let _ = unbalanced-freevars-in-branches(_, !t1);
  let _ = unbalanced-freevars-in-branches(_, !t2);
  let _ = unbalanced-freevars-in-branches(_, !t3);
  let _ = unbalanced-freevars-in-branches(_, !t4);
  let n: int = 10;
  let !xs: list(int) = List[1, 2, 3];
  let _ = literal-match(n);
  let _ on n = literal-match-N(n);
  let _ = literal-match-in-cons(!xs);
  let _ on !xs = literal-match-in-cons-N(!xs);
  let _ = n;
  let _ = !xs;
  let _: list(int) = use-struct(list-monoid(_));
  let _: list(bool) = use-struct(list-monoid(_));
  let _: list(() -> int) = use-struct(list-monoid(_));
  let _: list(int) = use-struct-2(list-monoid(_));
  let _: list(bool) = use-struct-2(list-monoid(_));
  let _: list(() -> int) = use-struct-2(list-monoid(_));
  Unit
}

define main(): unit {
  test-resource();
  test-match()
}
