import {
  core.int.io {print-int-line},
}

data finite-map(a, b) {
| Leaf
| Node(finite-map(a, b), a, b, finite-map(a, b))
}

data finite-map-signature(a, b) {
| Finite-Map(
    empty: finite-map(a, b),
    insert: (a, b, finite-map(a, b)) -> finite-map(a, b),
    lookup: (a, &finite-map(a, b)) -> ?b,
  )
}

define make-finite-map(a: type, b: type, !compare: (a, a) -> ordering): finite-map-signature(a, b) {
  Finite-Map of {
    empty := Leaf,
    insert := {
      define insert(!key: a, value: b, haystack: finite-map(a, b)): finite-map(a, b) {
        match haystack {
        | Leaf =>
          Node(Leaf, !key, value, Leaf)
        | Node(left, !k, v, right) =>
          match !compare(!key, !k) {
          | LT =>
            Node(insert(!key, value, left), !k, v, right)
          | EQ =>
            Node(left, !k, value, right)
          | GT =>
            Node(left, !k, v, insert(!key, value, right))
          }
        }
      }
    },
    lookup := {
      define lookup(!key: a, haystack: &finite-map(a, b)): ?b {
        case haystack {
        | Leaf =>
          none
        | Node(left, k, v, right) =>
          match !compare(!key, *k) {
          | LT =>
            lookup(!key, left)
          | EQ =>
            Right(*v)
          | GT =>
            lookup(!key, right)
          }
        }
      }
    },
  }
}

define compare-int(x: int, y: int): ordering {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let Finite-Map of {empty, insert := !insert, lookup} = make-finite-map(_, _, compare-int);
  let mymap = !insert(1, List[type], empty);
  let mymap = !insert(2, List[type, type], mymap);
  let mymap = !insert(2, List[type, type], mymap);
  let mymap = !insert(2, List[int], mymap);
  let !mymap = !insert(3, List[() -> int], mymap);
  let _ = !mymap;
  let _ = !mymap;
  let result on !mymap =
    match lookup(2, !mymap) {
    | Left(_) =>
      1
    | Right(xs) =>
      match xs {
      | Nil =>
        10
      | Cons(_, _) =>
        20
      }
    };
  let _ = !mymap;
  print-int-line(result);
}
