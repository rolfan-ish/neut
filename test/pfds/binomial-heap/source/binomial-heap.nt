import {
  core.int.io {print-int-line},
  core.list {reverse},
}

data tree(a) {
  // the list is in decreasing order of rank
| Node(int, a, list(tree(a)))
}

inline heap(a: type): type {
  // the list is in increasing order of rank
  list(tree(a))
}

define join(a: type, cmp: &(a, a) -> ordering, t1: tree(a), t2: tree(a)): tree(a) {
  match t1, t2 {
  | Node(r1, !x1, children1), Node(r2, !x2, children2) =>
    match cmp(!x1, !x2) {
    | LT =>
      Node(add-int(r1, 1), !x1, Cons(Node(r2, !x2, children2), children1))
    | _ =>
      Node(add-int(r1, 1), !x2, Cons(Node(r1, !x1, children1), children2))
    }
  }
}

define rank(a: type, t: &tree(a)): int {
  case t {
  | Node(r, _, _) =>
    *r
  }
}

define insert-tree(a: type, cmp: &(a, a) -> ordering, t: tree(a), h: heap(a)): heap(a) {
  match h {
  | Nil =>
    List[t]
  | Cons(t1, rest) =>
    let r on t = rank(a, t);
    let r1 on t1 = rank(a, t1);
    if lt-int(r, r1) {
      Cons(t, Cons(t1, rest))
    } else {
      insert-tree(a, cmp, join(a, cmp, t, t1), rest)
    }
  }
}

define insert(a: type, cmp: &(a, a) -> ordering, value: a, h: heap(a)): heap(a) {
  insert-tree(a, cmp, Node(0, value, Nil), h)
}

define merge(a: type, cmp: &(a, a) -> ordering, h1: heap(a), h2: heap(a)): heap(a) {
  match h1, h2 {
  | Nil, h2 =>
    h2
  | h1, Nil =>
    h1
  | Cons(t1, ts1), Cons(t2, ts2) =>
    let r1 on t1 = rank(a, t1);
    let r2 on t2 = rank(a, t2);
    if lt-int(r1, r2) {
      Cons(t1, merge(a, cmp, ts1, Cons(t2, ts2)))
    } else-if gt-int(r1, r2) {
      Cons(t2, merge(a, cmp, Cons(t1, ts1), ts2))
    } else {
      insert-tree(a, cmp, join(a, cmp, t1, t2), merge(a, cmp, ts1, ts2))
    }
  }
}

define root(a: type, t: &tree(a)): a {
  case t {
  | Node(_, v, _) =>
    *v
  }
}

define find-min(a: type, cmp: &(a, a) -> ordering, h: &heap(a)): ?a {
  let helper =
    define self(!cand: a, h: &heap(a)): a {
      case h {
      | Nil =>
        !cand
      | Cons(t, ts) =>
        let !root-head = root(a, t);
        match cmp(!root-head, !cand) {
        | LT =>
          self(!root-head, ts)
        | _ =>
          self(!cand, ts)
        }
      }
    };
  case h {
  | Nil =>
    none
  | Cons(t, ts) =>
    let r = root(a, t);
    Right(helper(r, ts))
  }
}

define remove-min-tree(a: type, cmp: &(a, a) -> ordering, h: heap(a)): ?pair(tree(a), heap(a)) {
  match h {
  | Nil =>
    none
  | Cons(t, Nil) =>
    Right(Pair(t, Nil))
  | Cons(t, ts) =>
    try Pair(cand, ts-adjusted) = remove-min-tree(a, cmp, ts);
    let c on t, cand = {
      let root-head = root(a, t);
      let root-cand = root(a, cand);
      cmp(root-head, root-cand)
    };
    match c {
    | LT =>
      Right(Pair(t, Cons(cand, ts-adjusted)))
    | _ =>
      Right(Pair(cand, Cons(t, ts-adjusted)))
    }
  }
}

define delete-min(a: type, cmp: &(a, a) -> ordering, h: heap(a)): ?heap(a) {
  try Pair(Node(_, _, ts1), ts2): pair(tree(a), heap(a)) = remove-min-tree(a, cmp, h);
  Right(merge(a, cmp, reverse(ts1), ts2))
}

define compare-int(x: int, y: int): ordering {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let h: heap(int) = Nil;
  pin compare-int = compare-int;
  let h = insert(int, compare-int, 3, h);
  let h = insert(int, compare-int, 4, h);
  let h = insert(int, compare-int, 2, h);
  let h = insert(int, compare-int, 9, h);
  let h = insert(int, compare-int, 100, h);
  let h = insert(int, compare-int, 8, h);
  let !h = insert(int, compare-int, 1, h);
  let h = merge(int, compare-int, !h, !h);
  let maybe-min on h =
    match find-min(int, compare-int, h) {
    | Left(_) =>
      10
    | Right(min) =>
      min
    };
  let _ = h;
  print-int-line(maybe-min);
}
