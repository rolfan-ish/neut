import {
  core.int.io {print-int-line},
}

data heap(a) {
| Leaf
| Node(a, list(heap(a)))
}

define find-min(a: type, h: &heap(a)): ?a {
  case h {
  | Leaf =>
    none
  | Node(v, _) =>
    Right(*v)
  }
}

define merge(a: type, cmp: (a, a) -> ordering, h1: heap(a), h2: heap(a)): heap(a) {
  match h1, h2 {
  | Leaf, h2 =>
    h2
  | h1, Leaf =>
    h1
  | Node(!x1, hs1), Node(!x2, hs2) =>
    match cmp(!x1, !x2) {
    | LT =>
      Node(!x1, Cons(Node(!x2, hs2), hs1))
    | _ =>
      Node(!x2, Cons(Node(!x1, hs1), hs2))
    }
  }
}

define insert(a: type, cmp: (a, a) -> ordering, x: a, h: heap(a)): heap(a) {
  merge(_, cmp, Node(x, List[]), h)
}

define merge-pairs(a: type, !cmp: (a, a) -> ordering, hs: list(heap(a))): heap(a) {
  match hs {
  | Nil =>
    Leaf
  | Cons(h, Nil) =>
    h
  | Cons(h1, Cons(h2, rest)) =>
    merge(_, !cmp, merge(_, !cmp, h1, h2), merge-pairs(_, !cmp, rest))
  }
}

define delete-min(a: type, cmp: (a, a) -> ordering, h: heap(a)): ?heap(a) {
  match h {
  | Leaf =>
    none
  | Node(_, hs) =>
    Right(merge-pairs(_, cmp, hs))
  }
}

define compare-int(x: int, y: int): ordering {
  if lt-int(x, y) {
    LT
  } else-if gt-int(x, y) {
    GT
  } else {
    EQ
  }
}

define main(): unit {
  let h: heap(int) = Leaf;
  let h = insert(_, compare-int, 10, h);
  let h = insert(_, compare-int, 3, h);
  let h = insert(_, compare-int, 8, h);
  let h = insert(_, compare-int, 2, h);
  let maybe-min on h =
    match find-min(_, h) {
    | Left(_) =>
      10
    | Right(min) =>
      min
    };
  let _ = h;
  print-int-line(maybe-min);
}
