import {
  core.int.io {print-int-line},
}

// random access list via numerical representation
// (complete binary tree + dense representation)
data tree(a) {
| Leaf(a)
| Node(int, tree(a), tree(a))
}

data digit(a) {
| DigitZero
| DigitOne(tree(a))
}

data R-list(a) {
| New(list(digit(a)))
}

define size(a: type, t: &tree(a)): int {
  case t {
  | Leaf(_) =>
    1
  | Node(w, _, _) =>
    *w
  }
}

define join(a: type, t1: tree(a), t2: tree(a)): tree(a) {
  let s1 on t1 = size(_, t1);
  let s2 on t2 = size(_, t2);
  Node(add-int(s1, s2), t1, t2)
}

define cons-tree(a: type, t: tree(a), ts: R-list(a)): R-list(a) {
  match ts {
  | New(Nil) =>
    New(List[DigitOne(t)])
  | New(Cons(DigitZero, rest)) =>
    New(Cons(DigitOne(t), rest))
  | New(Cons(DigitOne(t0), rest)) =>
    let New(ts-new) = cons-tree(a, join(_, t, t0), New(rest));
    New(Cons(DigitZero, ts-new))
  }
}

define cons(a: type, x: a, ts: R-list(a)): R-list(a) {
  cons-tree(a, Leaf(x), ts)
}

define uncons-tree(a: type, ts: R-list(a)): ?pair(tree(a), R-list(a)) {
  let New(xs) = ts;
  match xs {
  | Nil =>
    none
  | Cons(DigitOne(y), Nil) =>
    Right(Pair(y, New(List[])))
  | Cons(DigitOne(y), rest) =>
    Right(Pair(y, New(Cons(DigitZero, rest))))
  | Cons(DigitZero, rest) =>
    match uncons-tree(_, New(rest)) {
    | Left(_) =>
      none
    | Right(Pair(new-tree, New(new-ts))) =>
      match new-tree {
      | Leaf(_) =>
        none
      | Node(_, t1, t2) =>
        Right(Pair(t1, New(Cons(DigitOne(t2), new-ts))))
      }
    }
  }
}

define lookup-tree(a: type, i: int, t: &tree(a)): ?a {
  case t {
  | Leaf(v) =>
    if eq-int(i, 0) {
      Right(*v)
    } else {
      none
    }
  | Node(w, t1, t2) =>
    let w-div-2 = div-int(*w, 2);
    if lt-int(i, w-div-2) {
      lookup-tree(a, i, t1)
    } else {
      lookup-tree(a, sub-int(i, w-div-2), t2)
    }
  }
}

define lookup-list(a: type, i: int, xs: &list(digit(a))): ?a {
  case xs {
  | Nil =>
    none
  | Cons(DigitZero, rest) =>
    lookup-list(_, i, rest)
  | Cons(DigitOne(t), rest) =>
    let s = size(_, t);
    if lt-int(i, s) {
      lookup-tree(_, i, t)
    } else {
      lookup-list(_, sub-int(i, s), rest)
    }
  }
}

define lookup(a: type, i: int, xs: &R-list(a)): ?a {
  tie New(xs) = xs;
  lookup-list(_, i, xs)
}

define update-tree(a: type, i: int, x: a, t: tree(a)): tree(a) {
  match t {
  | Leaf(v) =>
    if eq-int(i, 0) {
      Leaf(x)
    } else {
      Leaf(v)
    }
  | Node(w, t1, t2) =>
    let w-div-2 = div-int(w, 2);
    if lt-int(i, w-div-2) {
      Node(w, update-tree(_, i, x, t1), t2)
    } else {
      Node(w, t1, update-tree(_, sub-int(i, w-div-2), x, t2))
    }
  }
}

define update(a: type, i: int, x: a, xs: R-list(a)): R-list(a) {
  match xs {
  | New(Nil) =>
    New(Nil)
  | New(Cons(DigitZero, ts)) =>
    let New(new-xs) = update(_, i, x, New(ts));
    New(Cons(DigitZero, new-xs))
  | New(Cons(DigitOne(t), ts)) =>
    let s on t = size(_, t);
    if lt-int(i, s) {
      New(Cons(DigitOne(update-tree(_, i, x, t)), ts))
    } else {
      let New(new-xs) = update(_, sub-int(i, s), x, New(ts));
      New(Cons(DigitOne(t), new-xs))
    }
  }
}

define find-and-get(i: int, xs: &R-list(int)): int {
  match lookup(_, i, xs) {
  | Left(_) =>
    0
  | Right(v) =>
    v
  }
}

define main(): unit {
  let xs: R-list(int) = New(Nil);
  let xs = cons(_, 3, xs);
  let xs = cons(_, 2, xs);
  let xs = cons(_, 4, xs);
  let xs = cons(_, 1, xs);
  let v1 on xs = find-and-get(0, xs);
  // 1
  let v2 on xs = find-and-get(1, xs);
  // 4
  let _ on xs = find-and-get(2, xs);
  // 2
  let v4 on xs = find-and-get(3, xs);
  // 3
  let xs = update(_, 2, 10, xs);
  let v3-modified on xs = find-and-get(2, xs);
  // 10
  let _ = xs;
  // 1 + 4 + 10 + 3 = 18
  print-int-line(add-int(v1, add-int(v2, add-int(v3-modified, v4))))
}
