import {
  core.int.io {print-int-line},
  core.list {reverse},
}

data queue(a) {
| Queue(list(a), list(a))
}

define empty(a: type): queue(a) {
  Queue(List[], List[])
}

define head(a: type, q: &queue(a)): ?a {
  case q {
  | Queue(Cons(x, _), _) =>
    Right(*x)
  | _ =>
    none
  }
}

define sanitize(a: type, q: queue(a)): queue(a) {
  match q {
  | Queue(Nil, ys) =>
    Queue(reverse(ys), List[])
  | q =>
    q
  }
}

define tail(a: type, q: queue(a)): ?queue(a) {
  match q {
  | Queue(Cons(_, rest), ys) =>
    Right(sanitize(_, Queue(rest, ys)))
  | _ =>
    none
  }
}

define snoc(a: type, v: a, q: queue(a)): queue(a) {
  let Queue(xs, ys) = q;
  sanitize(_, Queue(xs, Cons(v, ys)))
}

define sum(xs: &list(int)): int {
  case xs {
  | Nil =>
    0
  | Cons(v, rest) =>
    add-int(*v, sum(rest))
  }
}

define main(): unit {
  let q: queue(list(int)) = empty(_);
  let q = snoc(_, List[2], q);
  let q = snoc(_, List[5], q);
  let q = snoc(_, List[1], q);
  // v1 == 2
  let v1 on q =
    match head(_, q) {
    | Right(xs1) =>
      let v1 on xs1 = sum(xs1);
      let _ = xs1;
      v1
    | Left(_) =>
      4
    };
  let mq = tail(_, q);
  let result =
    match mq {
    | Left(_) =>
      1
    | Right(q) =>
      let q = snoc(_, List[3], q);
      let q = snoc(_, List[8], q);
      // v2 = 5
      let v2 on q =
        match head(_, q) {
        | Right(xs) =>
          let v on xs = sum(xs);
          let _ = xs;
          v
        | Left(_) =>
          4
        };
      let _ = q;
      // 2 + 5 = 7
      add-int(v1, v2)
    };
  print-int-line(result);
}
